<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.document.mapper.DocMapper">

    <!--addDoc-->
    <insert id="addDoc" parameterType="map" useGeneratedKeys="true" keyColumn="docid">
        insert into doc (createtime,userid,title,content,shareperms,teamid,modifytime,status) values (#{createtime},#{userid},#{title},#{content},#{shareperms},#{teamid},#{modifytime},#{status})
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="docid">
            select last_insert_id() as docid
        </selectKey>
    </insert>

    <!--queryDocByDocid-->
    <select id="queryDocByDocid" resultType="Doc" parameterType="int">
        select * from doc where docid=#{docid}
    </select>

    <!--addHistory-->
    <insert id="addHistory" parameterType="map">
        insert into recentread (docid,userid,readtime) values (#{docid},#{userid},#{readtime})
    </insert>

    <!--replaceHistory-->
    <insert id="replaceHistory" parameterType="map">
        insert into recentread(docid, userid, readtime) values (#{docid},#{userid},#{readtime})
        on duplicate key update
        readtime=#{readtime}
    </insert>

    <!--countHistory-->
    <select id="countHistory" parameterType="map" resultType="int">
        select count(*) from recentread where userid=#{userid}
    </select>

    <!--deleteFirstHistory-->
    <delete id="deleteFirstHistory" parameterType="map">
        delete from recentread
        where userid=#{userid} and docid=#{docid} and readtime=(select a.readtime from
            (select * from recentread a where userid=#{userid} and docid=#{docid} order by readtime limit 1)a)
    </delete>

    <!--returnFirstHistory-->
    <select id="returnFirstHistory" parameterType="map" resultType="java.sql.Timestamp">
        select readtime from recentread a where userid=${userid} and docid=${docid} order by readtime,userid limit 0,1
    </select>

    <!--writeDoc-->
    <update id="saveDoc" parameterType="map">
        update doc set title=#{title},content=#{content},modifytime=#{modifytime}
        where docid=#{docid}
    </update>

    <!--queryUseridByDocid-->
    <select id="queryUseridByDocid" parameterType="int" resultType="int">
        select userid from doc where docid=#{docid}
    </select>

    <!--queryLeaderidByTeamid-->
    <select id="queryLeaderidByTeamid" parameterType="int" resultType="int">
        select IFNULL(max(leaderid),0) from team where teamid=#{teamid}
    </select>

    <!--queryTeamidbyDocid-->
    <select id="queryTeamidbyDocid" parameterType="int" resultType="int">
        select teamid from doc where docid=#{docid}
    </select>

    <!--deleteDoc-->
    <update id="deleteDoc" parameterType="map">
        update doc set status=1,deletetime=#{deletetime} where docid=#{docid}
    </update>

    <!--deleteDocTotally-->
    <update id="deleteDocTotally" parameterType="map">
        update doc set status=2 where docid=#{docid}
    </update>

    <!--recoverDoc-->
    <update id="recoverDoc" parameterType="int">
        update doc set status=0,deletetime=null where docid=#{docid}
    </update>

    <!--getTitleBytemplateid-->
    <select id="getTitleBytemplateid" parameterType="int" resultType="String">
        select title from template where templateid=#{templateid}
    </select>

    <!--getContentBytemplateid-->
    <select id="getContentBytemplateid" parameterType="int" resultType="String">
        select content from template where templateid=#{templateid}
    </select>

    <!--getStatus-->
    <select id="getStatus" parameterType="int" resultType="int">
        select status from doc where docid=#{docid}
    </select>

    <!--updateSharePerms-->
    <update id="updateSharePerms" parameterType="int">
        update doc set shareperms=#{shareperms} where docid=#{docid}
    </update>

    <!--collectDoc-->
    <update id="collectDoc" parameterType="int">
        insert into collection (docid, userid) values (#{docid},#{userid})
    </update>

    <!--deleteCollection-->
    <delete id="deleteCollection" parameterType="int">
        delete from collection where docid=#{docid} and userid=#{userid}
    </delete>

    <!--haveCollect-->
    <select id="haveCollect" parameterType="int" resultType="java.lang.Integer">
        select userid from collection where userid=#{userid} and docid=#{docid}
    </select>

    <!--replacePermsByUserid-->
    <insert id="replacePermsByUserid" parameterType="map">
        insert into perms(docid, userid, privateperms) values (#{docid},#{userid},#{privateperms})
        on duplicate key update
        privateperms=#{privateperms}
    </insert>

    <!--getOnlyCanReadList-->
    <select id="getOnlyCanReadList" parameterType="int" resultType="java.util.HashMap">
        select user.userid as userid,user.username as username,user.email as email,user.wechat as wechat,user.userimgpath as userimgpath
        from perms,user where perms.userid=user.userid and perms.docid=#{docid} and perms.privateperms=1
    </select>

    <!--getOnlyCanCommentList-->
    <select id="getOnlyCanCommentList" parameterType="int" resultType="java.util.HashMap">
        select user.userid as userid,user.username as username,user.email as email,user.wechat as wechat,user.userimgpath as userimgpath
        from perms,user where perms.userid=user.userid and perms.docid=#{docid} and perms.privateperms=2
    </select>

    <!--getOnlyCanWriteList-->
    <select id="getOnlyCanWriteList" parameterType="int" resultType="java.util.HashMap">
        select user.userid as userid,user.username as username,user.email as email,user.wechat as wechat,user.userimgpath as userimgpath
        from perms,user where perms.userid=user.userid and perms.docid=#{docid} and perms.privateperms=3
    </select>

    <!--addTemplate-->
    <insert id="addTemplate" parameterType="map" useGeneratedKeys="true" keyColumn="templateid">
        insert into template (userid, title, content,teamid) values (#{userid},#{title},#{content},#{teamid})
    </insert>

    <!--getUseridByTemplateid-->
    <select id="getUseridByTemplateid" parameterType="int" resultType="int">
        select userid from template where templateid=#{templateid}
    </select>

    <!--deleteTemplate-->
    <delete id="deleteTemplate" parameterType="int">
        delete from template where templateid=#{templateid}
    </delete>

    <!--getMyTemplateList-->
    <select id="getMyTemplateList" parameterType="int" resultType="java.util.HashMap">
        select templateid as templateid,title as title from template where userid=#{userid}
    </select>

    <!--getTeamTemplateList-->
    <select id="getTeamTemplateList" parameterType="int" resultType="java.util.HashMap">
        select templateid as templateid,title as title from template where teamid=#{teamid}
    </select>

    <!--getTemplateByTemplateid-->
    <select id="getTemplateByTemplateid" parameterType="int" resultType="java.util.HashMap">
        select template.templateid as templateid,template.title as title,template.content as content,user.userid as userid,user.username as username,user.userimgpath as userimgpath
        from template,user where templateid=#{templateid} and template.userid=user.userid;
    </select>

    <!--addEditRecord-->
    <insert id="addEditRecord" parameterType="map">
        insert into editrecord (userid, docid, modifytime, finish) VALUES (#{userid},#{docid},#{modifytime},0)
    </insert>

    <!--isEditing-->
    <select id="isEditing" parameterType="int" resultType="java.lang.Integer">
        select userid from editrecord where docid=#{docid} and finish=0
    </select>

    <!--getUseridFromEditrecord-->
    <select id="getUseridFromEditrecord" resultType="int" parameterType="int">
        select userid from editrecord where docid=#{docid} and finish=0
    </select>

    <!--editFinish-->
    <update id="editFinish" parameterType="int">
        update editrecord set finish=1 where userid=#{userid} and docid=#{docid} and finish=0
    </update>

    <!--getModifyList-->
    <select id="getModifyList" parameterType="int" resultType="java.util.HashMap">
        select user.userid as userid,user.username as username,editrecord.modifytime from editrecord,user
        where editrecord.docid=#{docid} and user.userid=editrecord.userid and finish=1;
    </select>

    <!--getUserListByUsername-->
    <select id="getUserListByUsername" parameterType="String" resultType="java.util.HashMap">
        select userid,username,userimgpath from user where username like concat(concat('%',#{username}),'%')
    </select>
</mapper>